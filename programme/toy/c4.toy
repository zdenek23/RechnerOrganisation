10: 7FF0 	;  MAIN LDA RF 0xF0            ;initialize stack pointer
11: 1EF0 	;       ADD RE RF  R0          ;initialize MAIN base pointer
12: 7101 	;       LDA R1 1               ;constant 1
13: 7471 	;       LDA R4 BUF             ;int* buffer;
14: FD26 	;  A0  JL  RD  LL0             ;A0:getchar();
15: 7281 	;      LDA R2  X               ;R2*X;
16: 2FF1 	;      SUB RF  RF  R1          ;
17: B20F 	;      STI R2  RF              ;parameter int* value;
18: 2FF1 	;      SUB RF  RF  R1          ;
19: B10F 	;      STI R1  RF              ;parameter newline = 1;
1A: FD38 	;      JL  RD  PF              ;print() for testing
1B: 7202 	;      LDA R2  2               ;get 2 parameter out of stack
1C: 1FF2 	;      ADD RF  RF  R2          ;
1D: FD57 	;      JL  RD  CV              ;
1E: C514 	;      BZ  R5  A0              ;if (halt==0) goto A00;
1F: 1FE0 	;      ADD RF  RE  R0          ;epilog: restore old stack pointer
20: AE0F 	;      LDI RE  RF              ;restore old base pointer
21: 0000 	;      HLT                     ;return 0;
22: 82FE 	;  POL LD  R2  0xFE            ;check control register
23: C222 	;      BZ  R2  POL             ;if control register is 0, goto POL    
24: 90FE 	;      ST  R0  0xFE            ;reset control register to 0
25: ED00 	;      JR  RD
26: 2FF1 	;  LL0 SUB RF  RF  R1          ;
27: BD0F 	;      STI RD  RF              ;PUSH RD
28: 2FF1 	;      SUB RF  RF  R1          ;prolog
29: BE0F 	;      STI RE  RF              ;PUSH RE
2A: 1EF0 	;      ADD RE  RF  R0          ;initialize getchar() base pointer
2B: FD22 	;      JL  RD  POL             ;CALL polling routine    
2C: 8CFF 	;      LD  RC  0xFF            ;read from stdin
2D: 7203 	;      LDA R2  3               ;R2 = EOF;
2E: 222C 	;      SUB R2  R2  RC          ;temp = EOF - RC
2F: C231 	;      BZ  R2  F1              ;if (RC==EOF) goto F1
30: C032 	;      BZ  R0  F2              ;goto F2
31: 1510 	;  F1  ADD R5  R1  R0          ;halt = 1;
32: 1FE0 	;  F2  ADD RF  RE  R0          ;epilog
33: AE0F 	;      LDI RE  RF              ;
34: 1FF1 	;      ADD RF  RF  R1          ;POP RE
35: AD0F 	;      LDI RD  RF              ;POP return adress from stack
36: 1FF1 	;      ADD RF  RF  R1          ;
37: ED00 	;      JR  RD                  ;
38: 2FF1 	;  PF  SUB RF  RF  R1          ;
39: BD0F 	;      STI RD  RF              ;PUSH RD
3A: 2FF1 	;      SUB RF  RF  R1          ;prolog
3B: BE0F 	;      STI RE  RF              ;PUSH RE
3C: 2EE1 	;      SUB RE  RE  R1          ;
3D: A20E 	;      LDI R2  RE              ;R2 = &value;
3E: 2EE1 	;      SUB RE  RE  R1          ;R3 = newline;
3F: A30E 	;      LDI R3  RE              ;
40: 1EF0 	;      ADD RE  RF  R0          ;initialize printf() base pointer
41: 2FF1 	;      SUB RF  RF  R1          ;PUSH &value as local variable
42: B20F 	;      STI R2  RF              ;
43: 2FF1 	;      SUB RF  RF  R1          ;PUSH newline as local variable
44: B20F 	;      STI R2  RF              ;
45: FD22 	;      JL  RD  POL             ;CALL polling routine
46: 1FF1 	;      ADD RF  RF  R1          ;
47: A20F 	;      LDI R2  RF              ;R2 = &value;
48: 2FF1 	;      SUB RF  RF  R1          ;
49: A202 	;      LDI R2  R2              ;R2 = value;
4A: 92FF 	;      ST  R2  0xFF            ;printf("%d", *value);
4B: A20F 	;      LDI R2  RF              ; 
4C: C251 	;      BZ  R2  D0              ;if (nl==0)
4D: FD22 	;      JL  RD  POL             ;CALL polling routine
4E: 7282 	;      LDA R2  N               ;R2 = newline;
4F: A202 	;      LDI R2  R2              ; 
50: 92FF 	;      ST  R2  0xFF            ;
51: 1FE0 	;  D0  ADD RF  RE  R0          ;epilog
52: AE0F 	;      LDI RE  RF              ;
53: 1FF1 	;      ADD RF  RF  R1          ;POP RE
54: AD0F 	;      LDI RD  RF              ;POP return adress from stack
55: 1FF1 	;      ADD RF  RF  R1          ;
56: ED00 	;      JR  RD                  ;
57: 2FF1 	;  CV  SUB RF  RF  R1          ;
58: BD0F 	;      STI RD  RF              ;PUSH RD
59: 2FF1 	;      SUB RF  RF  R1          ;prolog
5A: BE0F 	;      STI RE  RF              ;PUSH RE
5B: 1EF0 	;      ADD RE  RF  R0          ;initialize getchar() base pointer
5C: 8B81 	;      LD  RB  X               ;                        
5D: C665 	;      BZ  R6  E0              ;if (digit==0) goto E0;
5E: 720A 	;      LDA R2  0xA             ;temp = 10;
5F: 13B0 	;      ADD R3  RB  R0          ;temp2 = X;
60: 2221 	;      SUB R2  R2  R1          ;temp -= 1;
61: 1BB3 	;  C0  ADD RB  RB  R3          ;X += temp2;
62: 2221 	;      SUB R2  R2  R1          ;temp--;
63: D261 	;      BP  R2  C0              ;if (temp) goto C0;
64: C066 	;      BZ  R0  E1              ;
65: 7B00 	;  E0  LDA RB  0               ;X = 0;
66: 7230 	;  E1  LDA R2  0x30            ;
67: 22C2 	;      SUB R2  RC  R2          ;
68: 1BB2 	;      ADD RB  RB  R2          ;X = X + (i - 0x30);
69: 7601 	;      LDA R6  1               ;digit = 1;
6A: 9B81 	;      ST  RB  X               ;
6B: 1FE0 	;      ADD RF  RE  R0          ;epilog
6C: AE0F 	;      LDI RE  RF              ;
6D: 1FF1 	;      ADD RF  RF  R1          ;POP RE
6E: AD0F 	;      LDI RD  RF              ;POP return adress from stack
6F: 1FF1 	;      ADD RF  RF  R1          ;
70: ED00 	;      JR  RD                  ;
71: 0000 	;  BUF     DUP 0x10            ;buffer
81: 0000 	;  X       DW  0               ;int X;
82: 800A 	;  N       DW  0x800A          ;int newline = 0x800A;
